fn f() (int, int) {
	return 0, 0
}

_ := 0, 0
_ := f()
_, _ := f()
_, _ := 0, f()
_, _ := f(), 0
_, _, _ := 0, f()
_, _, _ := f(), 0
_, _ := f(), f()
_, _, _, _ := f(), f()

_, _ := 0, match 4 {
	1 { 0 }
	else { 1 }
}
_ := match 4 {
	1 { f() }
	else { f() }
}
_, _ := 0, match 4 {
	1 { f() }
	else { f() }
}

_, _ := 0, if true { 0 } else { 1 }
_ := if true { f() } else { f() }
_, _ := 0, if true { f() } else { f() }
